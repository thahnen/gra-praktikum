<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoyaleDotNet</name>
    </assembly>
    <members>
        <member name="T:RoyaleDotNet.CallbackData">
            <summary>
            Specifies the type of data which should be captured and returned as callback.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.CameraDevice">
            <summary>
            This class represents the time-of-flight camera system. Typically,
            an instance is created by the `CameraManager` which automatically detects a connected module.
            The support access levels can be activated by entering the correct code during creation.
            After creation, the CameraDevice is in ready state and can be initialized. Before starting
            capturing an operation mode must be set. The provided examples should give a good overview
            on how to use this class.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.Finalize">
            <summary>
            Deletes the CameraDevice instance and releases all allocated resources.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.Initialize">
            <summary>
            LEVEL 1
            Initializes the camera device and sets basic settings, this method must be called only once
            ideally after the class is created. The settings pointer can also be null which means that a generic
            setting is used
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetId(System.String@)">
            <summary>
            LEVEL 1
            Get the ID of the camera device
            </summary>
            <param name="cameraId">output variable for camera id</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetCameraName(System.String@)">
            <summary>
            LEVEL 1
            the associated camera name as a string which is defined in the CoreConfig of each module.
            </summary>
            <param name="cameraName">output variable for camera name</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetCameraInfo(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            LEVEL 1
            Retrieve further information for this specific camera.
            </summary>
            <param name="cameraInfo">output variable for map, where the keys are depending on the used camera</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.StartCapture">
            <summary>
            LEVEL 1
            <para/>Starts the video capture mode (free-running), based on the specified operation mode.
            A listener needs to be registered in order to retrieve the data stream. Either raw data
            or processed data can be consumed. If no data listener is registered an error will be returned
            and capturing is not started.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.StopCapture">
            <summary>
            LEVEL 1
            <para/>Stops the video capturing mode. All buffers should be released again by the data listener.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterDepthDataListener(RoyaleDotNet.IDepthDataListener)">
            <summary>
            LEVEL 1
            <para/>Once registering the data listener, 3D point cloud data is sent via the callback function.
            </summary>
            <param name="listener">listener interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterDepthDataListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the data depth listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterDepthImageListener(RoyaleDotNet.IDepthImageListener)">
            <summary>
            LEVEL 1
            <para/>Once registering the data listener, Android depth image data is sent via the callback function.
            </summary>
            <param name="listener">listener interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterDepthImageListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the depth image listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterSparsePointCloudListener(RoyaleDotNet.ISparsePointCloudListener)">
            <summary>
            LEVEL 1
            <para/>Once registering the data listener, Android point cloud data is sent via the callback function.
            </summary>
            <param name="listener">listener interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterSparsePointCloudListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the sparse point cloud listener listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterIRImageListener(RoyaleDotNet.IIRImageListener)">
            <summary>
            LEVEL 1
            <para/>Once registering the data listener, IR image data is sent via the callback function.
            </summary>
            <param name="listener">listener interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterIRImageListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the IR image listener listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterRecordStoppedListener(RoyaleDotNet.IRecordStoppedListener)">
            <summary>
            LEVEL 1
            <para/>Once registering a record listener, the listener gets notified once recording has stopped after
            specified frames.
            </summary>
            <param name="listener">listener interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterRecordStoppedListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the record listener.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterExposureListener(RoyaleDotNet.IExposureListener)">
             <summary>
             LEVEL 1
             [deprecated]
             Once registering the exposure listener, new exposure values calculated by the processing are sent
             to the listener.  Every callback will contain only one exposure time, and in mixed mode there
             is no indication which stream the callback refers to.  To receive the streamId, use the
             IExposureListener2 interface instead.
            
             The original IExposureListener returns an array of times, but that array is always
             only one element, containing the same time that IExposureListener2 returns.  Both
             interfaces are only called when autoexposure is active.
             </summary>
             <param name="listener">interface which needs to implement the callback method</param>
             <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterExposureListener(RoyaleDotNet.IExposureListener2)">
            <summary>
            LEVEL 1
            Once registering the exposure listener, new exposure values calculated by the processing are sent
            to the listener.
            </summary>
            <param name="listener">interface which needs to implement the callback method</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterExposureListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the exposure listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterEventListener(RoyaleDotNet.IEventListener)">
            <summary>
            LEVEL 1
            Once registering the event listener, new events are sent to the listener.
            </summary>
            <param name="listener">interface which needs to implement the callback method</param>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterEventListener">
            <summary>
            LEVEL 1
            <para/>Unregisters the event listener
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetMaxSensorWidth(System.UInt16@)">
            <summary>
            LEVEL 1
            <para/>Returns the maximal width supported by the camera device.
            </summary>
            <returns>Maximal width supported by the camera device.</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetMaxSensorHeight(System.UInt16@)">
            <summary>
            LEVEL 1
            <para/>Returns the maximal width supported by the camera device.
            </summary>
            <returns>Maximal width supported by the camera device.</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetUseCase(System.String)">
            <summary>
            LEVEL 1
            <para/>Sets the use case for the camera. If the use case is supported by the connected camera device
            SUCCESS will be returned. Please get the list of supported usecases by calling GetUseCases().
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetStreams(System.UInt16[]@)">
            <summary>
            LEVEL 1
            Get the streams associated with the current use case.
            </summary>
            <param name="streams">identifiers for each stream</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetNumberOfStreams(System.UInt32@,System.String)">
            <summary>
            LEVEL 1
            Get the number of streams associated with the given use case.
            </summary>
            <param name="nrStreams">output variable for the number of streams</param>
            <param name="name">use case name</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetCurrentUseCase(System.String@)">
            <summary>
            LEVEL 1
            Returns the current usecase of the camera
            </summary>
            <param name="currentUseCase">output variable for the current use case</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetUseCases(System.Collections.Generic.List{System.String}@)">
            <summary>
            LEVEL 1
            Returns all use cases which are supported by the connected module and valid for the current
            selected CallbackData information (e.g. Raw, Depth, ...)
            </summary>
            <param name="useCases">output variable for list of supported use cases</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.IsConnected(System.Boolean@)">
            <summary>
            LEVEL 1
            <para/>Returns the information if the camera is properly initialized and a connection is established.
            </summary>
            <param name="isConnected">output variable for connected state. Set to true if the camera is properly
            initialized and a connection is established, false otherwise.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.IsCapturing(System.Boolean@)">
            <summary>
            LEVEL 1
            Returns the information if the camera is currently in capture mode
            </summary>
            <param name="isCapturing">output variable for capturing state. Set to true if the camera is currently
            in capture mode, false otherwise.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.IsCalibrated(System.Boolean@)">
            <summary>
            LEVEL 1
            Returns the information if the camera module is calibrated. Older camera modules
            can still be operated with royale, but calibration data may be incomplete.
            </summary>
            <param name="isCalibrated">output variable for calibrated state. Set to true if the module contains
            proper calibration data.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetAccessLevel(RoyaleDotNet.CameraDevice.CameraAccessLevel@)">
            <summary>
            LEVEL 1
            <para/>Returns the current camera device access level
            </summary>
            <param name="accessLevel">output variable for current camera device access level.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetExposureTime(System.UInt32,System.UInt16)">
            <summary>
            LEVEL 1
            <para/>Change the exposure time for supported operated operation modes. The exposure time can also be altered during capture
            mode. The maximal exposure time is defined by the used operation mode.
            </summary>
            <param name="exposureTime">exposure time in micro seconds</param>
            <param name="streamId">for mixed mode use cases, the stream to act on; for
            single-stream use cases the default value of 0 (which is otherwise not a valid stream
            id) can be used to refer to that stream for backward compatibility</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetExposureMode(RoyaleDotNet.ExposureMode,System.UInt16)">
            <summary>
            LEVEL 1
            Change the exposure mode for the supported operated operation modes. If MANUAL exposure mode of operation is chosen, the user
            is able to determine set exposure time manually within the boundaries of the exposure limits of the specific operation mode.
            In AUTOMATIC mode the optimum exposure settings are determined the system itself.
            </summary>
            <param name="exposureMode">mode of operation to determine the exposure time</param>
            <param name="streamId">for mixed mode use cases, the stream to act on; for
            single-stream use cases the default value of 0 (which is otherwise not a valid stream
            id) can be used to refer to that stream for backward compatibility</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetExposureMode(RoyaleDotNet.ExposureMode@,System.UInt16)">
            <summary>
            LEVEL 1
            Retrieves the current mode of operation for acquisition of the exposure time.
            </summary>
            <param name="exposureMode">output variable for current exposure mode</param>
            <param name="streamId">for mixed mode use cases, the stream to act on; for
            single-stream use cases the default value of 0 (which is otherwise not a valid stream
            id) can be used to refer to that stream for backward compatibility</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetFrameRate(System.UInt16)">
            <summary>
            LEVEL 1
            Set the frame rate to a value. Upper bound is given by the use case.
            E.g. Usecase with 5 FPS, a frame rate of maximal 5 can be set.
            This function is not supported for mixed-mode.
            </summary>
            <param name="frameRate">Requested frame rate.</param>
            <returns></returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetFrameRate(System.UInt16@)">
            <summary>
            LEVEL 1
            Get the current frame rate which is set for the current use case.
            This function is not supported for mixed-mode.
            </summary>
            <param name="frameRate">output variable for current frame rate.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetMaxFrameRate(System.UInt16@)">
            <summary>
            LEVEL 1
            Get the maximal frame rate which can be set for the current use case.
            This function is not supported for mixed-mode.
            </summary>
            <param name="maxFrameRate">output variable for maximum frame rate.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetExposureLimits(RoyaleDotNet.ExposureLimits@,System.UInt16)">
            <summary>
            LEVEL 1
            <para/>Retrieves the minimum and maximum allowed exposure limits of the specified operation mode.
            Can be used to retrieve the allowed operational range for a manual definition of the exposure time.
            </summary>
            <param name="limits">output variable for minimum and maximum allowed exposure limits of the
            specified operation mode.</param>
            <param name="streamId">for mixed mode use cases, the stream to act on; for
            single-stream use cases the default value of 0 (which is otherwise not a valid stream
            id) can be used to refer to that stream for backward compatibility</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetLensParameters(RoyaleDotNet.LensParameters@)">
            <summary>
            LEVEL 1
            <para/>Gets the intrinsics of the camera module which are stored in the calibration file.
            </summary>
            <param name="lensParams">output variable for lens parameters storing all relevant
            information (c,f,p,k), null on error.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.StartRecording(System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            LEVEL 1
            <para/>Start recording the raw data stream into a file. The recording will capture
            the raw data coming from the imager.
            </summary>
            <param name="fileName">Full path of target filename (proposed suffix is .rrf)</param>
            <param name="numberOfFrames">Maximal number of frames which should be captured (stop will be called
                automatically). If zero (default) is set, recording will happen till StopRecording() is called.</param>
            <param name="framesSkip">indicate how many frames should be skipped after every recorded frame. If zero (default)
                is set and msSkip is zero, every frame will be recorded.</param>
            <param name="msSkip">indicate how many milliseconds should be skipped after every recorded frame. If zero (default)
                is set and frameSkip is zero, every frame will be recorded.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.StopRecording">
            <summary>
            LEVEL 1
            <para/>Stop recording the raw data stream into a file. After the recording is stopped
            the file is available on the file system.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetExternalTrigger(System.Boolean)">
            <summary>
            LEVEL 1
            <para/>Enables/disables the external trigger
            </summary>
            <param name="useExternalTrigger"> true if the external trigger should be used, false otherwise</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetExposureGroups(System.Collections.Generic.List{System.String}@)">
            <summary>
            LEVEL 2
            Get the list of exposure groups supported by the currently set use case.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetExposureTime(System.String,System.UInt32)">
            <summary>
            LEVEL 2
            Change the exposure time for the supported operated operation modes. If MANUAL exposure
            mode of operation is chosen, the user is able to determine set exposure time manually
            within the boundaries of the exposure limits of the specific operation mode.
            <para/>In any other mode of operation the method will return EXPOSURE_MODE_INVALID to
            indicate incompatibility with the selected exposure mode. If the CameraDevice is the
            playback of a recording then LOGIC_ERROR is returned instead.
            </summary>
            <param name="exposureGroup">exposure group to be updated</param>
            <param name="exposureTime">exposure time in microseconds</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetExposureLimits(System.String,RoyaleDotNet.ExposureLimits@)">
            <summary>
            LEVEL 2
            Retrieves the minimum and maximum allowed exposure limits of the specified operation mode.
            Limits may vary between exposure groups.
            Can be used to retrieve the allowed operational range for a manual definition of the
            exposure time.
            </summary>
            <param name="exposureGroup">exposure group to be queried</param>
            <param name="exposureLimits">pair of (minimum, maximum) exposure time in microseconds</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetExposureTimes(System.Collections.Generic.List{System.UInt32},System.UInt16)">
            <summary>
            LEVEL 2
            Change the exposure times for all exposure groups. If the vector that is provided is too
            long the extraneous values will be discarded. If the vector is too short an error will
            be returned.
            </summary>
            <param name="exposureTimes">vector with exposure times in microseconds</param>
            <param name="streamId">for mixed mode use cases, the stream to act on; for
            single-stream use cases the default value of 0 (which is otherwise not a valid stream
            id) can be used to refer to that stream for backward compatibility</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.setExposureForGroups(System.Collections.Generic.List{System.UInt32})">
            <summary>
            LEVEL 2
            Change the exposure times for all exposure groups.
            The order of the exposure times is aligned with the order of exposure groups received by getExposureGroups.
            If the vector that is provided is too long the extraneous values will be discard.
            If the vector is too short an error will be returned.
            </summary>
            <param name="exposureTimes">vector with exposure times in microseconds</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetProcessingParameters(System.Collections.Generic.KeyValuePair{RoyaleDotNet.ProcessingFlag,RoyaleDotNet.Variant}[],System.UInt16)">
            <summary>
            LEVEL 2
            Set/alter processing parameters in order to control the data output. A list of processing flags
            is available as an enumeration. The `Variant` data type can take float, int, or bool. Please
            make sure to set the proper `Variant` type for the enum.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetProcessingParameters(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{RoyaleDotNet.ProcessingFlag,RoyaleDotNet.Variant}}@,System.UInt16)">
            <summary>
            LEVEL 2
            Retrieve the available processing parameters which are used for the calculation.
            </summary>
            <param name="processingParameters">output variable for processing parameter map</param>
            <param name="streamId">which stream's parameters to get</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.RegisterDataListenerExtended(RoyaleDotNet.IExtendedDataListener)">
            <summary>
            LEVEL 2
            Once registering extended data listener, extended data is sent via the callback function.
            If depth data only is specified, this listener is not called. For this case, please use
            the standard depth data listener.
            </summary>
            <param name="listener">interface which needs to implement the callback method</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.UnregisterDataListenerExtended">
            <summary>
            LEVEL 2
            Unregisters the data extended listener.
            </summary>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetCallbackData(System.UInt16)">
             <summary>
             LEVEL 2
             [deprecated]
             Set the callback output data type to one type only.
            
             INFO: This method needs to be called before startCapture(). If is is called during the camera
             is in capture mode, it will only have effect after the next stop/start sequence.
             </summary>
             <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetCallbackData(RoyaleDotNet.CallbackData)">
             <summary>
             LEVEL 2
             Set the callback output data type to one type only.
            
             INFO: This method needs to be called before startCapture(). If is is called during the camera
             is in capture mode, it will only have effect after the next stop/start sequence.
             </summary>
             <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetCalibrationData(System.String)">
            <summary>
            LEVEL 2
            Loads a different calibration from a file. This calibration data will also be used
            by the processing!
            </summary>
            <param name="calibrationFileName">filename name of the calibration file which should be loaded.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetCalibrationData(System.Collections.Generic.List{System.Byte})">
            <summary>
            LEVEL 2
            Loads a different calibration from a given Vector.This calibration data will also be used
            by the processing!
            </summary>
            <param name="calibrationData">data calibration data which should be used.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetCalibrationData(System.Collections.Generic.List{System.Byte}@)">
            <summary>
            LEVEL 2
            Retrieves the current calibration data.
            </summary>
            <param name="calibrationData">output variable for calibration data.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.WriteCalibrationToFlash">
             <summary>
             LEVEL 2
             Tries to write the current calibration file into the internal flash of the device.
             If no flash is found RESOURCE_ERROR is returned. If there are errors during the flash
             process it will try to restore the original calibration.
            
             This is not yet implemented for all cameras!
             </summary>
             <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.SetDutyCycle(System.Double,System.UInt16)">
            <summary>
            LEVEL 3
            Change the dutycycle of a certain sequence. If the dutycycle is not supported,</summary>
            an error will be returned. The dutycycle can also be altered during capture
            mode.
            <param name="dutyCycle">dutyCycle in percent (0, 100)</param>
            <param name="index">index of the sequence to change</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.WriteRegisters(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.UInt64}})">
            <summary>
            LEVEL 3
            For each element of the vector a single register write is issued for the connected imager.
            </summary>
            <param name="registers">
             Contains elements of possibly not-unique (String, uint64_t) duplets.
             The String component can consist of:
                a) a base-10 decimal number in the range of [0, 65535]
                b) a base-16 hexadecimal number preceeded by a "0x" in the range of [0, 65535]
            </param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.ReadRegisters(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.UInt64}}@)">
            <summary>
            LEVEL 3
            For each element of the vector a single register read is issued for the connected imager.
            </summary>
            <param name="registers">
             Contains elements of possibly not-unique (String, uint64_t) duplets.
             The String component can consist of:
                a) a base-10 decimal number in the range of [0, 65535]
                b) a base-16 hexadecimal number preceeded by a "0x" in the range of [0, 65535]
             The values of these will be overwritten with the values read from the device.
            </param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.ShiftLensCenter(System.Int16,System.Int16)">
            <summary>
            LEVEL 3
            Shift the current lens center by the given translation.
            If the resulting lens center is not valid this function will return an error.
            This function works only for raw data readout.</summary>
            <param name="tx">translation in x direction</param>
            <param name="ty">translation in y direction</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.GetLensCenter(System.UInt16@,System.UInt16@)">
            <summary>
            LEVEL 3
            Retrieves the current lens center.</summary>
            <param name="x">current x center</param>
            <param name="y">current y center</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.WriteDataToFlash(System.Collections.Generic.List{System.Byte})">
            <summary>
            LEVEL 3
            Writes an arbitrary vector of data on to the storage of the device.
            </summary>
            <param name="flashData">data which should be used.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.WriteDataToFlash(System.String)">
            <summary>
            LEVEL 3
            Writes an arbitrary file on to the storage of the device.
            </summary>
            <param name="fileName">file which should be used.</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraDevice.InitializeWithUseCase(System.String)">
            <summary>
            LEVEL 4
            Initialize the camera and configure the system for the specified use case
            </summary>
            <param name="initialUseCase">identifies the use case by an case sensitive string</param>
            <returns>CameraStatus</returns>
        </member>
        <member name="T:RoyaleDotNet.CameraManager">
            <summary>
            The CameraManager is responsible for detecting and creating a `CameraDevice`
            from a connected camera. Depending on the provided activation code access `Level 2` or
            `Level 3` can be created. Due to eye safety reasons, `Level 3` is for internal purposes only.
            Once a known time-of-flight device is detected, the according communication (e.g. via USB)
            is established and the camera device is ready.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraManager.#ctor(System.String)">
            <summary>
            Constructor of the CameraManager. An empty activationCode only allows to get an ICameraDevice.
            A valid activation code also allows to gain higher level access rights.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraManager.Finalize">
            <summary>
            Deletes the CameraManager instance and releases all allocated resources.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.CameraManager.GetConnectedCameraList(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the list of connected camera modules identified by a unique ID (serial number).
            This call tries to connect to each plugged-in camera and queries for its unique serial number.
            Once the scope of CameraManager ends, all (other) unused CameraDevices will
            be closed automatically. The CreateCamera() keeps the CameraDevice beyond the scope
            of the CameraManager since the ownership is given to the caller.
            </summary>
            <param name="androidUsbDeviceFD">ONLY REQUIRED ON ANDROID! File descriptor of the USB camera.</param>
            <param name="androidUsbDeviceVid">ONLY REQUIRED ON ANDROID! Vendor ID of the USB camera.</param>
            <param name="androidUsbDevicePid">ONLY REQUIRED ON ANDROID! Product ID of the USB camera.</param>
            <returns>List of connected camera modules</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraManager.CreateCamera(System.String)">
            <summary>
            Creates the camera object ICameraDevice identified by its ID. If the ID
            is not correct, a nullptr will be returned. The ownership is transfered to the caller, which
            means that the ICameraDevice is still valid once the CameraManager is out of scope.
            </summary>
            <param name="cameraID">Unique ID of the camera which was returned from GetConnectedCameraList()</param>
            <returns>CameraDevice instance if ID was found, null otherwise</returns>
        </member>
        <member name="M:RoyaleDotNet.CameraManager.CreateCamera(System.String,RoyaleDotNet.TriggerMode)">
            <summary>
            Creates the camera object ICameraDevice identified by its ID and sets the specified trigger mode
            </summary>
            <param name="cameraID">Unique ID of the camera which was returned from GetConnectedCameraList()</param>
            <param name="triggerMode">Trigger mode that should be used</param>
            <returns>CameraDevice instance if ID was found, null otherwise</returns>
        </member>
        <member name="T:RoyaleDotNet.DepthPoint">
            <summary>
            Encapsulates a 3D point in object space [m]. In addition to the X/Y/Z coordinate
            each point also includes a gray value, a noise standard deviation, and a depth confidence value.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.DepthData">
            <summary>
            This structure defines the depth data which is delivered through the callback.
            This data comprises a dense 3D point cloud with the size of the depth image (width, height).
            The points vector encodes an array (row-based) with the size of (width x height). Based
            on the `depthConfidence`, the user can decide to use the 3D point or not.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.IDepthDataListener">
            <summary>
            Provides the listener interface for consuming depth data from royale. A listener needs
            to implement this interface and register itself as a listener to the CameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.IDepthDataListener.OnNewData(RoyaleDotNet.DepthData)">
             <summary>
             Will be called on every frame update by the royale framework
            
             NOTICE:
             Calling other framework functions within the data callback
             can lead to undefined behavior and is therefore unsupported.
             Call these framework functions from another thread to avoid problems.
             </summary>
             <param name="data">DepthData of the captured frame.</param>
        </member>
        <member name="T:RoyaleDotNet.DepthImage">
             <summary>
             The depth image represents the depth and confidence for every pixel.
             The least significant 13 bits are the depth (z value along the optical axis) in
             millimeters. 0 stands for invalid measurement / no data.
            
             The most significant 3 bits correspond to a confidence value. 0 is the highest confidence, 7
             the second highest, and 1 the lowest.
            
             *note* The meaning of the confidence bits changed between Royale v3.14.0 and v3.15.0. Before
             v3.15.0, zero was lowest and 7 was highest. Because of this, the member was renamed from
             "data" to "cdData".
             </summary>
        </member>
        <member name="T:RoyaleDotNet.IDepthImageListener">
            <summary>
            Provides the listener interface for consuming depth images from Royale. A listener needs
            to implement this interface and register itself as a listener to the ICameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.IDepthImageListener.OnNewData(RoyaleDotNet.DepthImage)">
             <summary>
             Will be called on every frame update by the Royale framework
            
             NOTICE:
             Calling other framework functions within the data callback
             can lead to undefined behavior and is therefore unsupported.
             Call these framework functions from another thread to avoid problems.
             </summary>
             <param name="data">DepthImage of the captured frame.</param>
        </member>
        <member name="T:RoyaleDotNet.Event.EventSeverity">
            Severity of an Event.
        </member>
        <member name="F:RoyaleDotNet.Event.EventSeverity.ROYALE_INFO">
            Information only event.
        </member>
        <member name="F:RoyaleDotNet.Event.EventSeverity.ROYALE_WARNING">
            Potential issue detected (e.g. soft overtemperature limit reached).
        </member>
        <member name="F:RoyaleDotNet.Event.EventSeverity.ROYALE_ERROR">
            Errors occurred during operation.
            The operation (e.g. recording or stream capture) has failed and was stopped.
        </member>
        <member name="F:RoyaleDotNet.Event.EventSeverity.ROYALE_FATAL">
            Severe error was detected.
            The corresponding ICameraDevice is no longer in an usable state.
        </member>
        <member name="T:RoyaleDotNet.Event.EventType">
            Type of an IEvent.
        </member>
        <member name="M:RoyaleDotNet.IEventListener.OnEvent(RoyaleDotNet.Event)">
             <summary>
             Will be called when an event occurs.
            
             Note there are some constraints on what the user is allowed to do
             in the callback.
             - Actually the royale API does not claim to be reentrant (and probably isn't),
               so the user is not supposed to call any API function from this callback.
             - Deleting the ICameraDevice from the callback will most certainly
               lead to a deadlock.
               This has the interesting side effect that calling exit() or equivalent
               from the callback may cause issues.
             </summary>
             <param name="royaleEvent">The event.</param>
        </member>
        <member name="T:RoyaleDotNet.ExposureLimits">
            <summary>
            Represents the upper and lower exposure time limit values for a CameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.ExposureLimits.ToString">
            <summary>
            String representation of the exposure time limits.
            </summary>
        </member>
        <member name="P:RoyaleDotNet.ExposureLimits.LowerLimit">
            <summary>
            Lower exposure time limit.
            </summary>
        </member>
        <member name="P:RoyaleDotNet.ExposureLimits.UpperLimit">
            <summary>
            Upper exposure time limit.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.IExposureListener">
             <summary>
             A compatibility wrapper around IExposureListener2, which should be used instead.
            
             Please note that the callback is only made when autoexposure is enabled; when refactoring
             code to use the new interface, consider the possibility that the code you're refactoring has
             never been called.
             </summary>
        </member>
        <member name="T:RoyaleDotNet.ExtendedData">
            <summary>
            Class for getting additional data to the standard depth data. The
            retrieval of this data requires L2 access. Please be aware that not
            all data is filled. Therefore, use the has* calls to check if data is provided.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.IExtendedDataListener">
            <summary>
            Provides the listener interface for consuming depth data from royale. A listener needs
            to implement this interface and register itself as a listener to the CameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.IExtendedDataListener.OnNewData(RoyaleDotNet.ExtendedData)">
            <summary>
            Will be called on every frame update by the royale framework
            </summary>
            <param name="data">ExtendedData of the captured frame.</param>
        </member>
        <member name="T:RoyaleDotNet.IRImage">
            <summary>
            Infrared image with 8Bit mono information for every pixel
            </summary>
        </member>
        <member name="T:RoyaleDotNet.IIRImageListener">
            <summary>
            Provides the listener interface for consuming IR images from Royale. A listener needs
            to implement this interface and register itself as a listener to the ICameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.IIRImageListener.OnNewData(RoyaleDotNet.IRImage)">
             <summary>
             Will be called on every frame update by the Royale framework
            
             NOTICE:
             Calling other framework functions within the data callback
             can lead to undefined behavior and is therefore unsupported.
             Call these framework functions from another thread to avoid problems.
             </summary>
             <param name="data">IRImage of the captured frame.</param>
        </member>
        <member name="T:RoyaleDotNet.LensParameters">
            <summary>
            Intrinsics of the camera module.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.LensParameters.ToString">
            <summary>
            String representation of the camera module intrinsics.
            </summary>
        </member>
        <member name="P:RoyaleDotNet.LensParameters.PrincipalPoint">
            <summary>
            Principal point of the lens
            </summary>
        </member>
        <member name="P:RoyaleDotNet.LensParameters.FocalLength">
            <summary>
            Focal length of the lens
            </summary>
        </member>
        <member name="P:RoyaleDotNet.LensParameters.DistortionTangential">
            <summary>
            Tangential distortion of the lens
            </summary>
        </member>
        <member name="P:RoyaleDotNet.LensParameters.DistortionRadial">
            <summary>
            Radial distortion of the lens
            </summary>
        </member>
        <member name="T:RoyaleDotNet.LensParameters.RoyalePrincipalPoint">
            <summary>
            Principal point of the lens
            cX, cY
            </summary>
        </member>
        <member name="T:RoyaleDotNet.LensParameters.RoyaleFocalLength">
            <summary>
            Focal length of the lens
            fX, fY
            </summary>
        </member>
        <member name="T:RoyaleDotNet.LensParameters.RoyaleDistortionTangential">
            <summary>
            Tangential distortion of the lens
            p1, p2
            </summary>
        </member>
        <member name="T:RoyaleDotNet.LensParameters.RoyaleDistortionRadial">
            <summary>
            Radial distortion of the lens
            k1, k2, k3
            </summary>
        </member>
        <member name="T:RoyaleDotNet.ModulationSequence">
            <summary>
            Represents the upper and lower exposure time limit values for a CameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.ModulationSequence.ToString">
            <summary>
            String representation of the exposure time limits.
            </summary>
        </member>
        <member name="P:RoyaleDotNet.ModulationSequence.ModulationFrequency">
            <summary>
            Lower exposure time limit.
            </summary>
        </member>
        <member name="P:RoyaleDotNet.ModulationSequence.ExposureTime">
            <summary>
            Upper exposure time limit.
            </summary>
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.ConsistencyTolerance_Float">
            Consistency limit for asymmetry validation
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.FlyingPixelsF0_Float">
            Scaling factor for lower depth value normalization
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.FlyingPixelsF1_Float">
            Scaling factor for upper depth value normalization
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.FlyingPixelsFarDist_Float">
            Upper normalized threshold value for flying pixel detection
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.FlyingPixelsNearDist_Float">
            Lower normalized threshold value for flying pixel detection
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.LowerSaturationThreshold_Int">
            Lower limit for valid raw data values
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UpperSaturationThreshold_Int">
            Upper limit for valid raw data values
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.MPIAmpThreshold_Float">
            Threshold for MPI flags triggered by amplitude discrepancy
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.MPIDistThreshold_Float">
            Threshold for MPI flags triggered by distance discrepancy
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.MPINoiseDistance_Float">
            Threshold for MPI flags triggered by noise
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.NoiseThreshold_Float">
            Upper threshold for final distance noise
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.AdaptiveNoiseFilterType_Int">
            Kernel type of the adaptive noise filter
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.AutoExposureRefAmplitude_Float">
            DEPRECATED : The reference amplitude for the new exposure estimate
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseAdaptiveNoiseFilter_Bool">
            Activate spatial filter reducing the distance noise
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseAutoExposure_Bool">
            Activate dynamic control of the exposure time
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseRemoveFlyingPixel_Bool">
            Activate FlyingPixel flag
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseMPIFlagAverage_Bool">
            Activate spatial averaging MPI value before thresholding
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseMPIFlag_Amp_Bool">
            Activates MPI-amplitude flag
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseMPIFlag_Dist_Bool">
            Activates MPI-distance flag
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseValidateImage_Bool">
            Activates output image validation
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseRemoveStrayLight_Bool">
            Activates the removal of stray light
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseSparsePointCloud_Bool">
            Creates a sparse-point cloud in Spectre
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseFilter2Freq_Bool">
            Activates 2 frequency filtering
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.GlobalBinning_Int">
            Size of the global binning kernel
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.UseAdaptiveBinning_Bool">
            Activate adaptive binning
        </member>
        <member name="F:RoyaleDotNet.ProcessingFlag.AutoExposureRefValue_Float">
            The reference value for the new exposure estimate
        </member>
        <member name="T:RoyaleDotNet.IRecordStoppedListener">
            <summary>
            This interface needs to be implemented if the client wants to get notified when recording stopped after
            the specified number of frames.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.IRecordStoppedListener.OnRecordStopped(System.UInt32)">
            <summary>
            Will be called if the recording is stopped.
            </summary>
            <param name="numFrames">Number of frames that have been recorded.</param>
        </member>
        <member name="T:RoyaleDotNet.Royale">
            <summary>
            Accessor functions to get the version of the Royale library.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.Royale.GetVersion(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Returns the version number and build number of the Royale library.
            <param name="major">The major component of the version number</param>
            <param name="minor">The minor component of the version number</param>
            <param name="patch">The patch component of the version number</param>
            <param name="build">The build number, if built on the release build server</param>
            <remarks>This function always succeeds, no error status needs to be returned</remarks>
            </summary>
        </member>
        <member name="M:RoyaleDotNet.Royale.GetVersion(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@,System.String@)">
            <summary>
            Returns the version number of the Royale library, including SCM revision number.
            <param name="major">The major component of the version number</param>
            <param name="minor">The minor component of the version number</param>
            <param name="patch">The patch component of the version number</param>
            <param name="build">The build number, if built on the release build server</param>
            <param name="scm">The source control revision that the library was built from.  May be
            empty if the SCM revision wasn't available, and may have the postfix "-dirty" if there
            were local changes that weren't checked in to source control.</param>
            <returns>CameraStatus.SUCCESS, or an error code if allocating memory for the SCM revision string failed.</returns>
            <remarks>If the SCM number is not needed, this can also be read from the AssemblyInfo: typeof(RoyaleDotNet.CameraDevice).Assembly.GetName().Version</remarks>
            </summary>
        </member>
        <member name="T:RoyaleDotNet.SparsePointCloud">
            <summary>
            The sparse point cloud gives XYZ and confidence for every valid
            point.
            It is given as an array of packed coordinate quadruplets (x,y,z,c)
            as floating point values. The x, y and z coordinates are in meters.
            The confidence (c) has a floating point value in [0.0, 1.0], where 1
            corresponds to full confidence.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.ISparsePointCloudListener">
            <summary>
            Provides the listener interface for consuming sparse point clouds from Royale. A listener needs
            to implement this interface and register itself as a listener to the ICameraDevice.
            </summary>
        </member>
        <member name="M:RoyaleDotNet.ISparsePointCloudListener.OnNewData(RoyaleDotNet.SparsePointCloud)">
             <summary>
             Will be called on every frame update by the Royale framework
            
             NOTICE:
             Calling other framework functions within the data callback
             can lead to undefined behavior and is therefore unsupported.
             Call these framework functions from another thread to avoid problems.
             </summary>
             <param name="data">SparsePointCloud of the captured frame.</param>
        </member>
        <member name="T:RoyaleDotNet.StreamId">
            <summary>
            StreamIds are represented by UInt16s.  The StreamId class itself is only for handling
            the conversion of native data.
            </summary>
        </member>
        <member name="T:RoyaleDotNet.Variant">
            <summary>
            Implements a variant type which can take different basic data types, the default
            type is int and the value is set to zero
            </summary>
        </member>
    </members>
</doc>
